name: Microservice pipeline App
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      destroy:
        description: "Choose whether to destroy the resources"
        required: true
        default: "no"
        type: choice
        options:
          - "yes"
          - "no"

jobs:
  containerization:
    runs-on: ubuntu-latest
    steps:
      - name: checkout config files
        uses: actions/checkout@v2

      - name: docker hub login
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: install Dependencies
        run: |
          chmod +x install_dep.sh
          ./install_dep.sh
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/micro-app:${{ github.sha }}
      - name: Docker image Test
        run: |
          docker images
          docker run --name micro-app -d -p 5000:5000 ${{ vars.DOCKERHUB_USERNAME }}/micro-app:${{ github.sha }}
          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' micro-app)
          echo $IP

  terraform:
    name: terraform deployment
    runs-on: ubuntu-latest
    needs: containerization
    environment: production
    steps:
      - name: checkout config files
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.4

      - name: terraform init
        run: terraform init
        working-directory: ./Terraform
      
      - name: terraform plan
        run: | 
             terraform apply -target=data.aws_internet_gateway.existing_gw
             terraform plan
        working-directory: ./Terraform

      - name: terraform apply or destroy
        run: |
          if [ "${{ github.event.inputs.destroy }}" = "yes" ]; then
            terraform destroy -auto-approve
          else
            terraform apply -auto-approve
          fi
        working-directory: ./Terraform

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: terraform
    if: ${{ github.event.inputs.destroy == 'no' }}
    steps:
      - name: Checkout Kubernetes Manifests
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: us-west-2  

      - name: Update kubeconfig
        run: |
          aws eks --region us-west-2 update-kubeconfig --name stage_eks

      - name: Deploy Kubernetes Manifests
        run: |
          kubectl apply -f ./kubernetes/deployment.yml
          kubectl apply -f ./kubernetes/service.yml
        working-directory: ./kubernetes

      - name: Verify Deployment
        run: |
          kubectl get pods

  destroy_resources:
    name: Destroy Resources
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.destroy == 'yes' }}
    steps:
      - name: checkout config files
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.4

      - name: terraform init
        run: terraform init
        working-directory: ./Terraform

      - name: terraform destroy
        run: |
             terraform init -reconfigure
             terraform init -migrate-state
             terraform destroy -auto-approve
        working-directory: ./Terraform
